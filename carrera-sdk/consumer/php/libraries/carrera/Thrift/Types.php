<?php
namespace didi\carrera\consumer\proxy;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Message {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $value = null;
  /**
   * @var string
   */
  public $tag = null;
  /**
   * @var int
   */
  public $offset = null;
  /**
   * @var array
   */
  public $properties = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tag',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'offset',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'properties',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['tag'])) {
        $this->tag = $vals['tag'];
      }
      if (isset($vals['offset'])) {
        $this->offset = $vals['offset'];
      }
      if (isset($vals['properties'])) {
        $this->properties = $vals['properties'];
      }
    }
  }

  public function getName() {
    return 'Message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->properties = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->properties[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Message');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tag !== null) {
      $xfer += $output->writeFieldBegin('tag', TType::STRING, 3);
      $xfer += $output->writeString($this->tag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offset !== null) {
      $xfer += $output->writeFieldBegin('offset', TType::I64, 4);
      $xfer += $output->writeI64($this->offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->properties !== null) {
      if (!is_array($this->properties)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('properties', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->properties));
        {
          foreach ($this->properties as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Context {
  static $_TSPEC;

  /**
   * @var string
   */
  public $groupId = null;
  /**
   * @var string
   */
  public $topic = null;
  /**
   * @var string
   */
  public $qid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'topic',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'qid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupId'])) {
        $this->groupId = $vals['groupId'];
      }
      if (isset($vals['topic'])) {
        $this->topic = $vals['topic'];
      }
      if (isset($vals['qid'])) {
        $this->qid = $vals['qid'];
      }
    }
  }

  public function getName() {
    return 'Context';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->topic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->qid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Context');
    if ($this->groupId !== null) {
      $xfer += $output->writeFieldBegin('groupId', TType::STRING, 1);
      $xfer += $output->writeString($this->groupId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topic !== null) {
      $xfer += $output->writeFieldBegin('topic', TType::STRING, 2);
      $xfer += $output->writeString($this->topic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qid !== null) {
      $xfer += $output->writeFieldBegin('qid', TType::STRING, 3);
      $xfer += $output->writeString($this->qid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConsumeResult {
  static $_TSPEC;

  /**
   * @var \didi\carrera\consumer\proxy\Context
   */
  public $context = null;
  /**
   * @var int[]
   */
  public $successOffsets = null;
  /**
   * @var int[]
   */
  public $failOffsets = null;
  /**
   * @var \didi\carrera\consumer\proxy\ConsumeResult
   */
  public $nextResult = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'context',
          'type' => TType::STRUCT,
          'class' => '\didi\carrera\consumer\proxy\Context',
          ),
        3 => array(
          'var' => 'successOffsets',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'failOffsets',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        10 => array(
          'var' => 'nextResult',
          'type' => TType::STRUCT,
          'class' => '\didi\carrera\consumer\proxy\ConsumeResult',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['context'])) {
        $this->context = $vals['context'];
      }
      if (isset($vals['successOffsets'])) {
        $this->successOffsets = $vals['successOffsets'];
      }
      if (isset($vals['failOffsets'])) {
        $this->failOffsets = $vals['failOffsets'];
      }
      if (isset($vals['nextResult'])) {
        $this->nextResult = $vals['nextResult'];
      }
    }
  }

  public function getName() {
    return 'ConsumeResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->context = new \didi\carrera\consumer\proxy\Context();
            $xfer += $this->context->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->successOffsets = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $xfer += $input->readI64($elem14);
              $this->successOffsets []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->failOffsets = array();
            $_size15 = 0;
            $_etype18 = 0;
            $xfer += $input->readListBegin($_etype18, $_size15);
            for ($_i19 = 0; $_i19 < $_size15; ++$_i19)
            {
              $elem20 = null;
              $xfer += $input->readI64($elem20);
              $this->failOffsets []= $elem20;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->nextResult = new \didi\carrera\consumer\proxy\ConsumeResult();
            $xfer += $this->nextResult->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConsumeResult');
    if ($this->context !== null) {
      if (!is_object($this->context)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('context', TType::STRUCT, 1);
      $xfer += $this->context->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->successOffsets !== null) {
      if (!is_array($this->successOffsets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('successOffsets', TType::LST, 3);
      {
        $output->writeListBegin(TType::I64, count($this->successOffsets));
        {
          foreach ($this->successOffsets as $iter21)
          {
            $xfer += $output->writeI64($iter21);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failOffsets !== null) {
      if (!is_array($this->failOffsets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('failOffsets', TType::LST, 4);
      {
        $output->writeListBegin(TType::I64, count($this->failOffsets));
        {
          foreach ($this->failOffsets as $iter22)
          {
            $xfer += $output->writeI64($iter22);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nextResult !== null) {
      if (!is_object($this->nextResult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('nextResult', TType::STRUCT, 10);
      $xfer += $this->nextResult->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PullRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $groupId = null;
  /**
   * @var string
   */
  public $topic = null;
  /**
   * @var int
   */
  public $maxBatchSize = null;
  /**
   * @var int
   */
  public $maxLingerTime = null;
  /**
   * @var \didi\carrera\consumer\proxy\ConsumeResult
   */
  public $result = null;
  /**
   * @var string
   */
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'topic',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'maxBatchSize',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'maxLingerTime',
          'type' => TType::I32,
          ),
        50 => array(
          'var' => 'result',
          'type' => TType::STRUCT,
          'class' => '\didi\carrera\consumer\proxy\ConsumeResult',
          ),
        60 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupId'])) {
        $this->groupId = $vals['groupId'];
      }
      if (isset($vals['topic'])) {
        $this->topic = $vals['topic'];
      }
      if (isset($vals['maxBatchSize'])) {
        $this->maxBatchSize = $vals['maxBatchSize'];
      }
      if (isset($vals['maxLingerTime'])) {
        $this->maxLingerTime = $vals['maxLingerTime'];
      }
      if (isset($vals['result'])) {
        $this->result = $vals['result'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'PullRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->topic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxBatchSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxLingerTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::STRUCT) {
            $this->result = new \didi\carrera\consumer\proxy\ConsumeResult();
            $xfer += $this->result->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PullRequest');
    if ($this->groupId !== null) {
      $xfer += $output->writeFieldBegin('groupId', TType::STRING, 1);
      $xfer += $output->writeString($this->groupId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topic !== null) {
      $xfer += $output->writeFieldBegin('topic', TType::STRING, 2);
      $xfer += $output->writeString($this->topic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxBatchSize !== null) {
      $xfer += $output->writeFieldBegin('maxBatchSize', TType::I32, 10);
      $xfer += $output->writeI32($this->maxBatchSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxLingerTime !== null) {
      $xfer += $output->writeFieldBegin('maxLingerTime', TType::I32, 11);
      $xfer += $output->writeI32($this->maxLingerTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->result !== null) {
      if (!is_object($this->result)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('result', TType::STRUCT, 50);
      $xfer += $this->result->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 60);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PullResponse {
  static $_TSPEC;

  /**
   * @var \didi\carrera\consumer\proxy\Context
   */
  public $context = null;
  /**
   * @var \didi\carrera\consumer\proxy\Message[]
   */
  public $messages = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'context',
          'type' => TType::STRUCT,
          'class' => '\didi\carrera\consumer\proxy\Context',
          ),
        2 => array(
          'var' => 'messages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\didi\carrera\consumer\proxy\Message',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['context'])) {
        $this->context = $vals['context'];
      }
      if (isset($vals['messages'])) {
        $this->messages = $vals['messages'];
      }
    }
  }

  public function getName() {
    return 'PullResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->context = new \didi\carrera\consumer\proxy\Context();
            $xfer += $this->context->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->messages = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $elem28 = new \didi\carrera\consumer\proxy\Message();
              $xfer += $elem28->read($input);
              $this->messages []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PullResponse');
    if ($this->context !== null) {
      if (!is_object($this->context)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('context', TType::STRUCT, 1);
      $xfer += $this->context->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messages !== null) {
      if (!is_array($this->messages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messages', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->messages));
        {
          foreach ($this->messages as $iter29)
          {
            $xfer += $iter29->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConsumeStatsRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $group = null;
  /**
   * @var string
   */
  public $topic = null;
  /**
   * @var string
   */
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'topic',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['topic'])) {
        $this->topic = $vals['topic'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'ConsumeStatsRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->topic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConsumeStatsRequest');
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::STRING, 1);
      $xfer += $output->writeString($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topic !== null) {
      $xfer += $output->writeFieldBegin('topic', TType::STRING, 2);
      $xfer += $output->writeString($this->topic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 3);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FetchRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $consumerId = null;
  /**
   * @var string
   */
  public $groupId = null;
  /**
   * @var string
   */
  public $cluster = null;
  /**
   * @var array
   */
  public $fetchOffset = null;
  /**
   * @var int
   */
  public $maxBatchSize = null;
  /**
   * @var int
   */
  public $maxLingerTime = null;
  /**
   * @var string
   */
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumerId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'groupId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cluster',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'fetchOffset',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        10 => array(
          'var' => 'maxBatchSize',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'maxLingerTime',
          'type' => TType::I32,
          ),
        60 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['consumerId'])) {
        $this->consumerId = $vals['consumerId'];
      }
      if (isset($vals['groupId'])) {
        $this->groupId = $vals['groupId'];
      }
      if (isset($vals['cluster'])) {
        $this->cluster = $vals['cluster'];
      }
      if (isset($vals['fetchOffset'])) {
        $this->fetchOffset = $vals['fetchOffset'];
      }
      if (isset($vals['maxBatchSize'])) {
        $this->maxBatchSize = $vals['maxBatchSize'];
      }
      if (isset($vals['maxLingerTime'])) {
        $this->maxLingerTime = $vals['maxLingerTime'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'FetchRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->consumerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->fetchOffset = array();
            $_size30 = 0;
            $_ktype31 = 0;
            $_vtype32 = 0;
            $xfer += $input->readMapBegin($_ktype31, $_vtype32, $_size30);
            for ($_i34 = 0; $_i34 < $_size30; ++$_i34)
            {
              $key35 = '';
              $val36 = array();
              $xfer += $input->readString($key35);
              $val36 = array();
              $_size37 = 0;
              $_ktype38 = 0;
              $_vtype39 = 0;
              $xfer += $input->readMapBegin($_ktype38, $_vtype39, $_size37);
              for ($_i41 = 0; $_i41 < $_size37; ++$_i41)
              {
                $key42 = '';
                $val43 = 0;
                $xfer += $input->readString($key42);
                $xfer += $input->readI64($val43);
                $val36[$key42] = $val43;
              }
              $xfer += $input->readMapEnd();
              $this->fetchOffset[$key35] = $val36;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxBatchSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxLingerTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FetchRequest');
    if ($this->consumerId !== null) {
      $xfer += $output->writeFieldBegin('consumerId', TType::STRING, 1);
      $xfer += $output->writeString($this->consumerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupId !== null) {
      $xfer += $output->writeFieldBegin('groupId', TType::STRING, 2);
      $xfer += $output->writeString($this->groupId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster !== null) {
      $xfer += $output->writeFieldBegin('cluster', TType::STRING, 3);
      $xfer += $output->writeString($this->cluster);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fetchOffset !== null) {
      if (!is_array($this->fetchOffset)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fetchOffset', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->fetchOffset));
        {
          foreach ($this->fetchOffset as $kiter44 => $viter45)
          {
            $xfer += $output->writeString($kiter44);
            {
              $output->writeMapBegin(TType::STRING, TType::I64, count($viter45));
              {
                foreach ($viter45 as $kiter46 => $viter47)
                {
                  $xfer += $output->writeString($kiter46);
                  $xfer += $output->writeI64($viter47);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxBatchSize !== null) {
      $xfer += $output->writeFieldBegin('maxBatchSize', TType::I32, 10);
      $xfer += $output->writeI32($this->maxBatchSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxLingerTime !== null) {
      $xfer += $output->writeFieldBegin('maxLingerTime', TType::I32, 11);
      $xfer += $output->writeI32($this->maxLingerTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 60);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QidResponse {
  static $_TSPEC;

  /**
   * @var string
   */
  public $topic = null;
  /**
   * @var string
   */
  public $qid = null;
  /**
   * @var int
   */
  public $nextRequestOffset = null;
  /**
   * @var \didi\carrera\consumer\proxy\Message[]
   */
  public $messages = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'topic',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'qid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'nextRequestOffset',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'messages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\didi\carrera\consumer\proxy\Message',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['topic'])) {
        $this->topic = $vals['topic'];
      }
      if (isset($vals['qid'])) {
        $this->qid = $vals['qid'];
      }
      if (isset($vals['nextRequestOffset'])) {
        $this->nextRequestOffset = $vals['nextRequestOffset'];
      }
      if (isset($vals['messages'])) {
        $this->messages = $vals['messages'];
      }
    }
  }

  public function getName() {
    return 'QidResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->topic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->qid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->nextRequestOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->messages = array();
            $_size48 = 0;
            $_etype51 = 0;
            $xfer += $input->readListBegin($_etype51, $_size48);
            for ($_i52 = 0; $_i52 < $_size48; ++$_i52)
            {
              $elem53 = null;
              $elem53 = new \didi\carrera\consumer\proxy\Message();
              $xfer += $elem53->read($input);
              $this->messages []= $elem53;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QidResponse');
    if ($this->topic !== null) {
      $xfer += $output->writeFieldBegin('topic', TType::STRING, 1);
      $xfer += $output->writeString($this->topic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qid !== null) {
      $xfer += $output->writeFieldBegin('qid', TType::STRING, 2);
      $xfer += $output->writeString($this->qid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nextRequestOffset !== null) {
      $xfer += $output->writeFieldBegin('nextRequestOffset', TType::I64, 3);
      $xfer += $output->writeI64($this->nextRequestOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messages !== null) {
      if (!is_array($this->messages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('messages', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->messages));
        {
          foreach ($this->messages as $iter54)
          {
            $xfer += $iter54->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FetchResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var \didi\carrera\consumer\proxy\QidResponse[]
   */
  public $results = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'results',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\didi\carrera\consumer\proxy\QidResponse',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['results'])) {
        $this->results = $vals['results'];
      }
    }
  }

  public function getName() {
    return 'FetchResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->results = array();
            $_size55 = 0;
            $_etype58 = 0;
            $xfer += $input->readListBegin($_etype58, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $elem60 = null;
              $elem60 = new \didi\carrera\consumer\proxy\QidResponse();
              $xfer += $elem60->read($input);
              $this->results []= $elem60;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FetchResponse');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->results !== null) {
      if (!is_array($this->results)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('results', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->results));
        {
          foreach ($this->results as $iter61)
          {
            $xfer += $iter61->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AckResult {
  static $_TSPEC;

  /**
   * @var string
   */
  public $consumerId = null;
  /**
   * @var string
   */
  public $groupId = null;
  /**
   * @var string
   */
  public $cluster = null;
  /**
   * @var array
   */
  public $offsets = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumerId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'groupId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cluster',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'offsets',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::MAP,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::I64,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::I64,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['consumerId'])) {
        $this->consumerId = $vals['consumerId'];
      }
      if (isset($vals['groupId'])) {
        $this->groupId = $vals['groupId'];
      }
      if (isset($vals['cluster'])) {
        $this->cluster = $vals['cluster'];
      }
      if (isset($vals['offsets'])) {
        $this->offsets = $vals['offsets'];
      }
    }
  }

  public function getName() {
    return 'AckResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->consumerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->groupId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cluster);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->offsets = array();
            $_size62 = 0;
            $_ktype63 = 0;
            $_vtype64 = 0;
            $xfer += $input->readMapBegin($_ktype63, $_vtype64, $_size62);
            for ($_i66 = 0; $_i66 < $_size62; ++$_i66)
            {
              $key67 = '';
              $val68 = array();
              $xfer += $input->readString($key67);
              $val68 = array();
              $_size69 = 0;
              $_ktype70 = 0;
              $_vtype71 = 0;
              $xfer += $input->readMapBegin($_ktype70, $_vtype71, $_size69);
              for ($_i73 = 0; $_i73 < $_size69; ++$_i73)
              {
                $key74 = '';
                $val75 = 0;
                $xfer += $input->readString($key74);
                $xfer += $input->readI64($val75);
                $val68[$key74] = $val75;
              }
              $xfer += $input->readMapEnd();
              $this->offsets[$key67] = $val68;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AckResult');
    if ($this->consumerId !== null) {
      $xfer += $output->writeFieldBegin('consumerId', TType::STRING, 1);
      $xfer += $output->writeString($this->consumerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupId !== null) {
      $xfer += $output->writeFieldBegin('groupId', TType::STRING, 2);
      $xfer += $output->writeString($this->groupId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cluster !== null) {
      $xfer += $output->writeFieldBegin('cluster', TType::STRING, 3);
      $xfer += $output->writeString($this->cluster);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->offsets !== null) {
      if (!is_array($this->offsets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('offsets', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::MAP, count($this->offsets));
        {
          foreach ($this->offsets as $kiter76 => $viter77)
          {
            $xfer += $output->writeString($kiter76);
            {
              $output->writeMapBegin(TType::STRING, TType::I64, count($viter77));
              {
                foreach ($viter77 as $kiter78 => $viter79)
                {
                  $xfer += $output->writeString($kiter78);
                  $xfer += $output->writeI64($viter79);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ConsumeStats {
  static $_TSPEC;

  /**
   * @var string
   */
  public $group = null;
  /**
   * @var string
   */
  public $topic = null;
  /**
   * @var array
   */
  public $consumeOffsets = null;
  /**
   * @var array
   */
  public $produceOffsets = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'topic',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'consumeOffsets',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'produceOffsets',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
      if (isset($vals['topic'])) {
        $this->topic = $vals['topic'];
      }
      if (isset($vals['consumeOffsets'])) {
        $this->consumeOffsets = $vals['consumeOffsets'];
      }
      if (isset($vals['produceOffsets'])) {
        $this->produceOffsets = $vals['produceOffsets'];
      }
    }
  }

  public function getName() {
    return 'ConsumeStats';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->topic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->consumeOffsets = array();
            $_size80 = 0;
            $_ktype81 = 0;
            $_vtype82 = 0;
            $xfer += $input->readMapBegin($_ktype81, $_vtype82, $_size80);
            for ($_i84 = 0; $_i84 < $_size80; ++$_i84)
            {
              $key85 = '';
              $val86 = 0;
              $xfer += $input->readString($key85);
              $xfer += $input->readI64($val86);
              $this->consumeOffsets[$key85] = $val86;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->produceOffsets = array();
            $_size87 = 0;
            $_ktype88 = 0;
            $_vtype89 = 0;
            $xfer += $input->readMapBegin($_ktype88, $_vtype89, $_size87);
            for ($_i91 = 0; $_i91 < $_size87; ++$_i91)
            {
              $key92 = '';
              $val93 = 0;
              $xfer += $input->readString($key92);
              $xfer += $input->readI64($val93);
              $this->produceOffsets[$key92] = $val93;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ConsumeStats');
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::STRING, 1);
      $xfer += $output->writeString($this->group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topic !== null) {
      $xfer += $output->writeFieldBegin('topic', TType::STRING, 2);
      $xfer += $output->writeString($this->topic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->consumeOffsets !== null) {
      if (!is_array($this->consumeOffsets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('consumeOffsets', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->consumeOffsets));
        {
          foreach ($this->consumeOffsets as $kiter94 => $viter95)
          {
            $xfer += $output->writeString($kiter94);
            $xfer += $output->writeI64($viter95);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->produceOffsets !== null) {
      if (!is_array($this->produceOffsets)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('produceOffsets', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->produceOffsets));
        {
          foreach ($this->produceOffsets as $kiter96 => $viter97)
          {
            $xfer += $output->writeString($kiter96);
            $xfer += $output->writeI64($viter97);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PullException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'PullException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PullException');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


